pragma solidity >=0.5.0 <0.6.0;
import "./ownable.sol";

contract SocialMedia{
    
    struct User{
        uint username;
        uint64 karma;
    }
    struct Post{
        uint message;
        uint op;
        uint32 subMedia;
        uint32 likes;
        uint32 dislikes;
        bool modded;
    }
    struct Like{
        uint postId;
        uint owner;
        bool exists;
        bool like;
    }
    
    User[] public users;
    Post[] public posts;
    Like[] public likes;
    uint[] public subs;
    
    mapping (uint => uint[]) userToPosts;
    mapping (address => uint) addressToUser;
    mapping (uint => uint) postToUser;
    mapping (uint => uint) postToSub;
    mapping (uint => uint[]) subToPosts;
    mapping (uint => uint) subToOwner;
    
    modifier isUser(){
        require(addressToUser[msg.sender] != 0x0);
        _;
    }
    
    function createUser(uint username) public{
        require(addressToUser[msg.sender] == 0x0);
        uint  id = users.push(User(username, 0)) - 1;
        addressToUser[msg.sender] = id;
    }
    function createSub(uint name, bool mod) public{
        subs.push(name);
        if(mod == true){
            subToOwner[subs.length - 1] = addressToUser[msg.sender];
        }
    }
    function changeSubOwner(uint id, uint user) public{
        require(addressToUser[msg.sender] == subToOwner[id]);
        subToOwner[id] = user;
    }
    function modPost(uint id) public{
        require(addressToUser[msg.sender] == subToOwner[postToSub[id]]);
        posts[id].modded = true;
    }
    function unmodPost(uint id) public{
        require(addressToUser[msg.sender] == subToOwner[postToSub[id]]);
        posts[id].modded = false;
    }
    function createPost(uint message, uint32 subMedia) public isUser(){
        uint id = posts.push(Post(message, 0x0, subMedia, 0, 0, false)) - 1;
        postToUser[id] = addressToUser[msg.sender];
        userToPosts[addressToUser[msg.sender]].push(id);
        if(subMedia != 0x0){
            subToPosts[subMedia].push(id);
        }
    }
    function createComment(uint message, uint id) public isUser(){
        uint cid = posts.push(Post(message, id, posts[id].subMedia, 0, 0, false)) - 1;
        postToUser[cid] = addressToUser[msg.sender];
        userToPosts[addressToUser[msg.sender]].push(id);
        if(posts[id].subMedia != 0x0){
            subToPosts[posts[id].subMedia].push(cid);
        }
    }
    function createLike(uint id) public isUser(){
        likes.push(Like(id, addressToUser[msg.sender], false, false));
    }
    function likePost(uint id) public isUser(){
        require(likes[id].postId != 0x0);
        if(likes[id].exists == true){
            require(likes[id].like == false);
            undislikePost(id);
        }
        posts[likes[id].postId].likes += 1;
        users[postToUser[likes[id].postId]].karma += 1;
        likes[id].like = true;
        likes[id].exists = true;
    }
    function unlikePost(uint id) public isUser(){
        require(likes[id].postId != 0x0);
        require(likes[id].like = true);
        posts[likes[id].postId].likes -= 1;
        users[postToUser[likes[id].postId]].karma -= 1;
        likes[id].like = false;
        likes[id].exists = false;
    }
    function dislikePost(uint id) public isUser(){
        require(likes[id].postId != 0x0);
        if(likes[id].exists == true){
            require(likes[id].like == true);
            unlikePost(id);
        }
        posts[likes[id].postId].dislikes += 1;
        users[postToUser[likes[id].postId]].karma -= 1;
        likes[id].like = false;
        likes[id].exists = true;
    }
    function undislikePost(uint id) public isUser(){
        require(likes[id].postId != 0x0);
        require(likes[id].like = false);
        posts[likes[id].postId].dislikes -= 1;
        users[postToUser[likes[id].postId]].karma += 1;
        likes[id].like = false;
        likes[id].exists = false;
    }
    function viewPost(uint id) external view returns(uint){
        return(posts[id].message);
    }
    function viewPostLikes(uint32 id) external view returns(uint){
        return(posts[id].likes);
    }
    function viewPostDislikes(uint32 id) external view returns(uint){
        return(posts[id].dislikes);
    }
    function viewPostOP(uint id) external view returns(uint){
        return(posts[id].op);
    }
    function viewPostOwner(uint id) external view returns(uint){
        return(postToUser[id]);
    }
    function viewUserKarma(uint64 id) external view returns(uint){
        return(users[id].karma);
    }
    function viewUserPostNumber(uint64 id) external view returns(uint){
        return(userToPosts[id].length);
    }
    function viewUserPosts(uint id) external view returns(uint[] memory){
        return(userToPosts[id]);
    }
    function viewSubName(uint32 id) external view returns(uint){
        return(subs[id]);
    }
    function viewSubPosts(uint32 id) external view returns(uint[] memory){
        return(subToPosts[id]);
    }
    function viewSubOwner(uint id) external view returns(uint){
        return(subToOwner[id]);
    }
    function viewUsername(uint id) external view returns(uint){
        return(users[id].username);
    }
    function viewPostSub(uint id) external view returns(uint){
        return(postToSub[id]);
    }
    function viewPostMod(uint id)external view returns(bool){
        return(posts[id].modded);
    }
}
